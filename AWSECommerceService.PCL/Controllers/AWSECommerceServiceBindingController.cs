/*
 * AWSECommerceService.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using APIMATIC.SDK.Common;
using APIMATIC.SDK.Http.Request;
using APIMATIC.SDK.Http.Response;
using APIMATIC.SDK.Http.Client;

namespace AWSECommerceService.PCL.Controllers
{
    public partial class AWSECommerceServiceBindingController: BaseController, IAWSECommerceServiceBindingController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static AWSECommerceServiceBindingController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static AWSECommerceServiceBindingController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new AWSECommerceServiceBindingController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartClearResponseMsgModel response from the API call</return>
        public Models.CartClearResponseMsgModel CreateCartClear(Models.CartClearRequestMsgModel body)
        {
            Task<Models.CartClearResponseMsgModel> t = CreateCartClearAsync(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartClearResponseMsgModel response from the API call</return>
        public async Task<Models.CartClearResponseMsgModel> CreateCartClearAsync(Models.CartClearRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartClear");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartClearResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartModifyResponseMsgModel response from the API call</return>
        public Models.CartModifyResponseMsgModel CreateCartModify(Models.CartModifyRequestMsgModel body)
        {
            Task<Models.CartModifyResponseMsgModel> t = CreateCartModifyAsync(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartModifyResponseMsgModel response from the API call</return>
        public async Task<Models.CartModifyResponseMsgModel> CreateCartModifyAsync(Models.CartModifyRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartModify");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartModifyResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartCreateResponseMsgModel response from the API call</return>
        public Models.CartCreateResponseMsgModel CreateCartCreate(Models.CartCreateRequestMsgModel body)
        {
            Task<Models.CartCreateResponseMsgModel> t = CreateCartCreateAsync(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartCreateResponseMsgModel response from the API call</return>
        public async Task<Models.CartCreateResponseMsgModel> CreateCartCreateAsync(Models.CartCreateRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartCreate");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartCreateResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartAddResponseMsgModel response from the API call</return>
        public Models.CartAddResponseMsgModel CreateCartAdd(Models.CartAddRequestMsgModel body)
        {
            Task<Models.CartAddResponseMsgModel> t = CreateCartAddAsync(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartAddResponseMsgModel response from the API call</return>
        public async Task<Models.CartAddResponseMsgModel> CreateCartAddAsync(Models.CartAddRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartAdd");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartAddResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartGetResponseMsgModel response from the API call</return>
        public Models.CartGetResponseMsgModel CreateCartGet(Models.CartGetRequestMsgModel body)
        {
            Task<Models.CartGetResponseMsgModel> t = CreateCartGetAsync(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartGetResponseMsgModel response from the API call</return>
        public async Task<Models.CartGetResponseMsgModel> CreateCartGetAsync(Models.CartGetRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartGet");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartGetResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.SimilarityLookupResponseMsgModel response from the API call</return>
        public Models.SimilarityLookupResponseMsgModel CreateSimilarityLookup(Models.SimilarityLookupRequestMsgModel body)
        {
            Task<Models.SimilarityLookupResponseMsgModel> t = CreateSimilarityLookupAsync(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.SimilarityLookupResponseMsgModel response from the API call</return>
        public async Task<Models.SimilarityLookupResponseMsgModel> CreateSimilarityLookupAsync(Models.SimilarityLookupRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/SimilarityLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.SimilarityLookupResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.BrowseNodeLookupResponseMsgModel response from the API call</return>
        public Models.BrowseNodeLookupResponseMsgModel CreateBrowseNodeLookup(Models.BrowseNodeLookupRequestMsgModel body)
        {
            Task<Models.BrowseNodeLookupResponseMsgModel> t = CreateBrowseNodeLookupAsync(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.BrowseNodeLookupResponseMsgModel response from the API call</return>
        public async Task<Models.BrowseNodeLookupResponseMsgModel> CreateBrowseNodeLookupAsync(Models.BrowseNodeLookupRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/BrowseNodeLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.BrowseNodeLookupResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemLookupResponseMsgModel response from the API call</return>
        public Models.ItemLookupResponseMsgModel CreateItemLookup(Models.ItemLookupRequestMsgModel body)
        {
            Task<Models.ItemLookupResponseMsgModel> t = CreateItemLookupAsync(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemLookupResponseMsgModel response from the API call</return>
        public async Task<Models.ItemLookupResponseMsgModel> CreateItemLookupAsync(Models.ItemLookupRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/ItemLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.ItemLookupResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemSearchResponseMsgModel response from the API call</return>
        public Models.ItemSearchResponseMsgModel CreateItemSearch(Models.ItemSearchRequestMsgModel body)
        {
            Task<Models.ItemSearchResponseMsgModel> t = CreateItemSearchAsync(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemSearchResponseMsgModel response from the API call</return>
        public async Task<Models.ItemSearchResponseMsgModel> CreateItemSearchAsync(Models.ItemSearchRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/ItemSearch");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.ItemSearchResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemSearchResponseMsgModel response from the API call</return>
        public Models.ItemSearchResponseMsgModel CreateItemSearch9(Models.ItemSearchRequestMsgModel body)
        {
            Task<Models.ItemSearchResponseMsgModel> t = CreateItemSearch9Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemSearchResponseMsgModel response from the API call</return>
        public async Task<Models.ItemSearchResponseMsgModel> CreateItemSearch9Async(Models.ItemSearchRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTCA);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/ItemSearch");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.ItemSearchResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemLookupResponseMsgModel response from the API call</return>
        public Models.ItemLookupResponseMsgModel CreateItemLookup10(Models.ItemLookupRequestMsgModel body)
        {
            Task<Models.ItemLookupResponseMsgModel> t = CreateItemLookup10Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemLookupResponseMsgModel response from the API call</return>
        public async Task<Models.ItemLookupResponseMsgModel> CreateItemLookup10Async(Models.ItemLookupRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTCA);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/ItemLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.ItemLookupResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.BrowseNodeLookupResponseMsgModel response from the API call</return>
        public Models.BrowseNodeLookupResponseMsgModel CreateBrowseNodeLookup11(Models.BrowseNodeLookupRequestMsgModel body)
        {
            Task<Models.BrowseNodeLookupResponseMsgModel> t = CreateBrowseNodeLookup11Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.BrowseNodeLookupResponseMsgModel response from the API call</return>
        public async Task<Models.BrowseNodeLookupResponseMsgModel> CreateBrowseNodeLookup11Async(Models.BrowseNodeLookupRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTCA);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/BrowseNodeLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.BrowseNodeLookupResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.SimilarityLookupResponseMsgModel response from the API call</return>
        public Models.SimilarityLookupResponseMsgModel CreateSimilarityLookup12(Models.SimilarityLookupRequestMsgModel body)
        {
            Task<Models.SimilarityLookupResponseMsgModel> t = CreateSimilarityLookup12Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.SimilarityLookupResponseMsgModel response from the API call</return>
        public async Task<Models.SimilarityLookupResponseMsgModel> CreateSimilarityLookup12Async(Models.SimilarityLookupRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTCA);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/SimilarityLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.SimilarityLookupResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartGetResponseMsgModel response from the API call</return>
        public Models.CartGetResponseMsgModel CreateCartGet13(Models.CartGetRequestMsgModel body)
        {
            Task<Models.CartGetResponseMsgModel> t = CreateCartGet13Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartGetResponseMsgModel response from the API call</return>
        public async Task<Models.CartGetResponseMsgModel> CreateCartGet13Async(Models.CartGetRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTCA);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartGet");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartGetResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartAddResponseMsgModel response from the API call</return>
        public Models.CartAddResponseMsgModel CreateCartAdd14(Models.CartAddRequestMsgModel body)
        {
            Task<Models.CartAddResponseMsgModel> t = CreateCartAdd14Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartAddResponseMsgModel response from the API call</return>
        public async Task<Models.CartAddResponseMsgModel> CreateCartAdd14Async(Models.CartAddRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTCA);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartAdd");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartAddResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartCreateResponseMsgModel response from the API call</return>
        public Models.CartCreateResponseMsgModel CreateCartCreate15(Models.CartCreateRequestMsgModel body)
        {
            Task<Models.CartCreateResponseMsgModel> t = CreateCartCreate15Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartCreateResponseMsgModel response from the API call</return>
        public async Task<Models.CartCreateResponseMsgModel> CreateCartCreate15Async(Models.CartCreateRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTCA);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartCreate");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartCreateResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartModifyResponseMsgModel response from the API call</return>
        public Models.CartModifyResponseMsgModel CreateCartModify16(Models.CartModifyRequestMsgModel body)
        {
            Task<Models.CartModifyResponseMsgModel> t = CreateCartModify16Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartModifyResponseMsgModel response from the API call</return>
        public async Task<Models.CartModifyResponseMsgModel> CreateCartModify16Async(Models.CartModifyRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTCA);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartModify");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartModifyResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartClearResponseMsgModel response from the API call</return>
        public Models.CartClearResponseMsgModel CreateCartClear17(Models.CartClearRequestMsgModel body)
        {
            Task<Models.CartClearResponseMsgModel> t = CreateCartClear17Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartClearResponseMsgModel response from the API call</return>
        public async Task<Models.CartClearResponseMsgModel> CreateCartClear17Async(Models.CartClearRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTCA);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartClear");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartClearResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemSearchResponseMsgModel response from the API call</return>
        public Models.ItemSearchResponseMsgModel CreateItemSearch18(Models.ItemSearchRequestMsgModel body)
        {
            Task<Models.ItemSearchResponseMsgModel> t = CreateItemSearch18Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemSearchResponseMsgModel response from the API call</return>
        public async Task<Models.ItemSearchResponseMsgModel> CreateItemSearch18Async(Models.ItemSearchRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTCN);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/ItemSearch");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.ItemSearchResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemLookupResponseMsgModel response from the API call</return>
        public Models.ItemLookupResponseMsgModel CreateItemLookup19(Models.ItemLookupRequestMsgModel body)
        {
            Task<Models.ItemLookupResponseMsgModel> t = CreateItemLookup19Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemLookupResponseMsgModel response from the API call</return>
        public async Task<Models.ItemLookupResponseMsgModel> CreateItemLookup19Async(Models.ItemLookupRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTCN);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/ItemLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.ItemLookupResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.BrowseNodeLookupResponseMsgModel response from the API call</return>
        public Models.BrowseNodeLookupResponseMsgModel CreateBrowseNodeLookup20(Models.BrowseNodeLookupRequestMsgModel body)
        {
            Task<Models.BrowseNodeLookupResponseMsgModel> t = CreateBrowseNodeLookup20Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.BrowseNodeLookupResponseMsgModel response from the API call</return>
        public async Task<Models.BrowseNodeLookupResponseMsgModel> CreateBrowseNodeLookup20Async(Models.BrowseNodeLookupRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTCN);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/BrowseNodeLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.BrowseNodeLookupResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.SimilarityLookupResponseMsgModel response from the API call</return>
        public Models.SimilarityLookupResponseMsgModel CreateSimilarityLookup21(Models.SimilarityLookupRequestMsgModel body)
        {
            Task<Models.SimilarityLookupResponseMsgModel> t = CreateSimilarityLookup21Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.SimilarityLookupResponseMsgModel response from the API call</return>
        public async Task<Models.SimilarityLookupResponseMsgModel> CreateSimilarityLookup21Async(Models.SimilarityLookupRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTCN);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/SimilarityLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.SimilarityLookupResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartGetResponseMsgModel response from the API call</return>
        public Models.CartGetResponseMsgModel CreateCartGet22(Models.CartGetRequestMsgModel body)
        {
            Task<Models.CartGetResponseMsgModel> t = CreateCartGet22Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartGetResponseMsgModel response from the API call</return>
        public async Task<Models.CartGetResponseMsgModel> CreateCartGet22Async(Models.CartGetRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTCN);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartGet");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartGetResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartAddResponseMsgModel response from the API call</return>
        public Models.CartAddResponseMsgModel CreateCartAdd23(Models.CartAddRequestMsgModel body)
        {
            Task<Models.CartAddResponseMsgModel> t = CreateCartAdd23Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartAddResponseMsgModel response from the API call</return>
        public async Task<Models.CartAddResponseMsgModel> CreateCartAdd23Async(Models.CartAddRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTCN);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartAdd");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartAddResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartCreateResponseMsgModel response from the API call</return>
        public Models.CartCreateResponseMsgModel CreateCartCreate24(Models.CartCreateRequestMsgModel body)
        {
            Task<Models.CartCreateResponseMsgModel> t = CreateCartCreate24Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartCreateResponseMsgModel response from the API call</return>
        public async Task<Models.CartCreateResponseMsgModel> CreateCartCreate24Async(Models.CartCreateRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTCN);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartCreate");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartCreateResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartModifyResponseMsgModel response from the API call</return>
        public Models.CartModifyResponseMsgModel CreateCartModify25(Models.CartModifyRequestMsgModel body)
        {
            Task<Models.CartModifyResponseMsgModel> t = CreateCartModify25Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartModifyResponseMsgModel response from the API call</return>
        public async Task<Models.CartModifyResponseMsgModel> CreateCartModify25Async(Models.CartModifyRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTCN);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartModify");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartModifyResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartClearResponseMsgModel response from the API call</return>
        public Models.CartClearResponseMsgModel CreateCartClear26(Models.CartClearRequestMsgModel body)
        {
            Task<Models.CartClearResponseMsgModel> t = CreateCartClear26Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartClearResponseMsgModel response from the API call</return>
        public async Task<Models.CartClearResponseMsgModel> CreateCartClear26Async(Models.CartClearRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTCN);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartClear");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartClearResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemSearchResponseMsgModel response from the API call</return>
        public Models.ItemSearchResponseMsgModel CreateItemSearch27(Models.ItemSearchRequestMsgModel body)
        {
            Task<Models.ItemSearchResponseMsgModel> t = CreateItemSearch27Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemSearchResponseMsgModel response from the API call</return>
        public async Task<Models.ItemSearchResponseMsgModel> CreateItemSearch27Async(Models.ItemSearchRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTDE);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/ItemSearch");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.ItemSearchResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemLookupResponseMsgModel response from the API call</return>
        public Models.ItemLookupResponseMsgModel CreateItemLookup28(Models.ItemLookupRequestMsgModel body)
        {
            Task<Models.ItemLookupResponseMsgModel> t = CreateItemLookup28Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemLookupResponseMsgModel response from the API call</return>
        public async Task<Models.ItemLookupResponseMsgModel> CreateItemLookup28Async(Models.ItemLookupRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTDE);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/ItemLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.ItemLookupResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.BrowseNodeLookupResponseMsgModel response from the API call</return>
        public Models.BrowseNodeLookupResponseMsgModel CreateBrowseNodeLookup29(Models.BrowseNodeLookupRequestMsgModel body)
        {
            Task<Models.BrowseNodeLookupResponseMsgModel> t = CreateBrowseNodeLookup29Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.BrowseNodeLookupResponseMsgModel response from the API call</return>
        public async Task<Models.BrowseNodeLookupResponseMsgModel> CreateBrowseNodeLookup29Async(Models.BrowseNodeLookupRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTDE);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/BrowseNodeLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.BrowseNodeLookupResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.SimilarityLookupResponseMsgModel response from the API call</return>
        public Models.SimilarityLookupResponseMsgModel CreateSimilarityLookup30(Models.SimilarityLookupRequestMsgModel body)
        {
            Task<Models.SimilarityLookupResponseMsgModel> t = CreateSimilarityLookup30Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.SimilarityLookupResponseMsgModel response from the API call</return>
        public async Task<Models.SimilarityLookupResponseMsgModel> CreateSimilarityLookup30Async(Models.SimilarityLookupRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTDE);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/SimilarityLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.SimilarityLookupResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartGetResponseMsgModel response from the API call</return>
        public Models.CartGetResponseMsgModel CreateCartGet31(Models.CartGetRequestMsgModel body)
        {
            Task<Models.CartGetResponseMsgModel> t = CreateCartGet31Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartGetResponseMsgModel response from the API call</return>
        public async Task<Models.CartGetResponseMsgModel> CreateCartGet31Async(Models.CartGetRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTDE);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartGet");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartGetResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartAddResponseMsgModel response from the API call</return>
        public Models.CartAddResponseMsgModel CreateCartAdd32(Models.CartAddRequestMsgModel body)
        {
            Task<Models.CartAddResponseMsgModel> t = CreateCartAdd32Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartAddResponseMsgModel response from the API call</return>
        public async Task<Models.CartAddResponseMsgModel> CreateCartAdd32Async(Models.CartAddRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTDE);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartAdd");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartAddResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartCreateResponseMsgModel response from the API call</return>
        public Models.CartCreateResponseMsgModel CreateCartCreate33(Models.CartCreateRequestMsgModel body)
        {
            Task<Models.CartCreateResponseMsgModel> t = CreateCartCreate33Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartCreateResponseMsgModel response from the API call</return>
        public async Task<Models.CartCreateResponseMsgModel> CreateCartCreate33Async(Models.CartCreateRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTDE);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartCreate");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartCreateResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartModifyResponseMsgModel response from the API call</return>
        public Models.CartModifyResponseMsgModel CreateCartModify34(Models.CartModifyRequestMsgModel body)
        {
            Task<Models.CartModifyResponseMsgModel> t = CreateCartModify34Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartModifyResponseMsgModel response from the API call</return>
        public async Task<Models.CartModifyResponseMsgModel> CreateCartModify34Async(Models.CartModifyRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTDE);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartModify");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartModifyResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartClearResponseMsgModel response from the API call</return>
        public Models.CartClearResponseMsgModel CreateCartClear35(Models.CartClearRequestMsgModel body)
        {
            Task<Models.CartClearResponseMsgModel> t = CreateCartClear35Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartClearResponseMsgModel response from the API call</return>
        public async Task<Models.CartClearResponseMsgModel> CreateCartClear35Async(Models.CartClearRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTDE);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartClear");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartClearResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemSearchResponseMsgModel response from the API call</return>
        public Models.ItemSearchResponseMsgModel CreateItemSearch36(Models.ItemSearchRequestMsgModel body)
        {
            Task<Models.ItemSearchResponseMsgModel> t = CreateItemSearch36Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemSearchResponseMsgModel response from the API call</return>
        public async Task<Models.ItemSearchResponseMsgModel> CreateItemSearch36Async(Models.ItemSearchRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTES);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/ItemSearch");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.ItemSearchResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemLookupResponseMsgModel response from the API call</return>
        public Models.ItemLookupResponseMsgModel CreateItemLookup37(Models.ItemLookupRequestMsgModel body)
        {
            Task<Models.ItemLookupResponseMsgModel> t = CreateItemLookup37Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemLookupResponseMsgModel response from the API call</return>
        public async Task<Models.ItemLookupResponseMsgModel> CreateItemLookup37Async(Models.ItemLookupRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTES);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/ItemLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.ItemLookupResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.BrowseNodeLookupResponseMsgModel response from the API call</return>
        public Models.BrowseNodeLookupResponseMsgModel CreateBrowseNodeLookup38(Models.BrowseNodeLookupRequestMsgModel body)
        {
            Task<Models.BrowseNodeLookupResponseMsgModel> t = CreateBrowseNodeLookup38Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.BrowseNodeLookupResponseMsgModel response from the API call</return>
        public async Task<Models.BrowseNodeLookupResponseMsgModel> CreateBrowseNodeLookup38Async(Models.BrowseNodeLookupRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTES);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/BrowseNodeLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.BrowseNodeLookupResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.SimilarityLookupResponseMsgModel response from the API call</return>
        public Models.SimilarityLookupResponseMsgModel CreateSimilarityLookup39(Models.SimilarityLookupRequestMsgModel body)
        {
            Task<Models.SimilarityLookupResponseMsgModel> t = CreateSimilarityLookup39Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.SimilarityLookupResponseMsgModel response from the API call</return>
        public async Task<Models.SimilarityLookupResponseMsgModel> CreateSimilarityLookup39Async(Models.SimilarityLookupRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTES);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/SimilarityLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.SimilarityLookupResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartGetResponseMsgModel response from the API call</return>
        public Models.CartGetResponseMsgModel CreateCartGet40(Models.CartGetRequestMsgModel body)
        {
            Task<Models.CartGetResponseMsgModel> t = CreateCartGet40Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartGetResponseMsgModel response from the API call</return>
        public async Task<Models.CartGetResponseMsgModel> CreateCartGet40Async(Models.CartGetRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTES);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartGet");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartGetResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartAddResponseMsgModel response from the API call</return>
        public Models.CartAddResponseMsgModel CreateCartAdd41(Models.CartAddRequestMsgModel body)
        {
            Task<Models.CartAddResponseMsgModel> t = CreateCartAdd41Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartAddResponseMsgModel response from the API call</return>
        public async Task<Models.CartAddResponseMsgModel> CreateCartAdd41Async(Models.CartAddRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTES);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartAdd");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartAddResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartCreateResponseMsgModel response from the API call</return>
        public Models.CartCreateResponseMsgModel CreateCartCreate42(Models.CartCreateRequestMsgModel body)
        {
            Task<Models.CartCreateResponseMsgModel> t = CreateCartCreate42Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartCreateResponseMsgModel response from the API call</return>
        public async Task<Models.CartCreateResponseMsgModel> CreateCartCreate42Async(Models.CartCreateRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTES);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartCreate");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartCreateResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartModifyResponseMsgModel response from the API call</return>
        public Models.CartModifyResponseMsgModel CreateCartModify43(Models.CartModifyRequestMsgModel body)
        {
            Task<Models.CartModifyResponseMsgModel> t = CreateCartModify43Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartModifyResponseMsgModel response from the API call</return>
        public async Task<Models.CartModifyResponseMsgModel> CreateCartModify43Async(Models.CartModifyRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTES);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartModify");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartModifyResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartClearResponseMsgModel response from the API call</return>
        public Models.CartClearResponseMsgModel CreateCartClear44(Models.CartClearRequestMsgModel body)
        {
            Task<Models.CartClearResponseMsgModel> t = CreateCartClear44Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartClearResponseMsgModel response from the API call</return>
        public async Task<Models.CartClearResponseMsgModel> CreateCartClear44Async(Models.CartClearRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTES);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartClear");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartClearResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemSearchResponseMsgModel response from the API call</return>
        public Models.ItemSearchResponseMsgModel CreateItemSearch45(Models.ItemSearchRequestMsgModel body)
        {
            Task<Models.ItemSearchResponseMsgModel> t = CreateItemSearch45Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemSearchResponseMsgModel response from the API call</return>
        public async Task<Models.ItemSearchResponseMsgModel> CreateItemSearch45Async(Models.ItemSearchRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTFR);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/ItemSearch");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.ItemSearchResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemLookupResponseMsgModel response from the API call</return>
        public Models.ItemLookupResponseMsgModel CreateItemLookup46(Models.ItemLookupRequestMsgModel body)
        {
            Task<Models.ItemLookupResponseMsgModel> t = CreateItemLookup46Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemLookupResponseMsgModel response from the API call</return>
        public async Task<Models.ItemLookupResponseMsgModel> CreateItemLookup46Async(Models.ItemLookupRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTFR);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/ItemLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.ItemLookupResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.BrowseNodeLookupResponseMsgModel response from the API call</return>
        public Models.BrowseNodeLookupResponseMsgModel CreateBrowseNodeLookup47(Models.BrowseNodeLookupRequestMsgModel body)
        {
            Task<Models.BrowseNodeLookupResponseMsgModel> t = CreateBrowseNodeLookup47Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.BrowseNodeLookupResponseMsgModel response from the API call</return>
        public async Task<Models.BrowseNodeLookupResponseMsgModel> CreateBrowseNodeLookup47Async(Models.BrowseNodeLookupRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTFR);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/BrowseNodeLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.BrowseNodeLookupResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.SimilarityLookupResponseMsgModel response from the API call</return>
        public Models.SimilarityLookupResponseMsgModel CreateSimilarityLookup48(Models.SimilarityLookupRequestMsgModel body)
        {
            Task<Models.SimilarityLookupResponseMsgModel> t = CreateSimilarityLookup48Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.SimilarityLookupResponseMsgModel response from the API call</return>
        public async Task<Models.SimilarityLookupResponseMsgModel> CreateSimilarityLookup48Async(Models.SimilarityLookupRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTFR);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/SimilarityLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.SimilarityLookupResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartGetResponseMsgModel response from the API call</return>
        public Models.CartGetResponseMsgModel CreateCartGet49(Models.CartGetRequestMsgModel body)
        {
            Task<Models.CartGetResponseMsgModel> t = CreateCartGet49Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartGetResponseMsgModel response from the API call</return>
        public async Task<Models.CartGetResponseMsgModel> CreateCartGet49Async(Models.CartGetRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTFR);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartGet");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartGetResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartAddResponseMsgModel response from the API call</return>
        public Models.CartAddResponseMsgModel CreateCartAdd50(Models.CartAddRequestMsgModel body)
        {
            Task<Models.CartAddResponseMsgModel> t = CreateCartAdd50Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartAddResponseMsgModel response from the API call</return>
        public async Task<Models.CartAddResponseMsgModel> CreateCartAdd50Async(Models.CartAddRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTFR);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartAdd");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartAddResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartCreateResponseMsgModel response from the API call</return>
        public Models.CartCreateResponseMsgModel CreateCartCreate51(Models.CartCreateRequestMsgModel body)
        {
            Task<Models.CartCreateResponseMsgModel> t = CreateCartCreate51Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartCreateResponseMsgModel response from the API call</return>
        public async Task<Models.CartCreateResponseMsgModel> CreateCartCreate51Async(Models.CartCreateRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTFR);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartCreate");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartCreateResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartModifyResponseMsgModel response from the API call</return>
        public Models.CartModifyResponseMsgModel CreateCartModify52(Models.CartModifyRequestMsgModel body)
        {
            Task<Models.CartModifyResponseMsgModel> t = CreateCartModify52Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartModifyResponseMsgModel response from the API call</return>
        public async Task<Models.CartModifyResponseMsgModel> CreateCartModify52Async(Models.CartModifyRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTFR);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartModify");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartModifyResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartClearResponseMsgModel response from the API call</return>
        public Models.CartClearResponseMsgModel CreateCartClear53(Models.CartClearRequestMsgModel body)
        {
            Task<Models.CartClearResponseMsgModel> t = CreateCartClear53Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartClearResponseMsgModel response from the API call</return>
        public async Task<Models.CartClearResponseMsgModel> CreateCartClear53Async(Models.CartClearRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTFR);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartClear");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartClearResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemSearchResponseMsgModel response from the API call</return>
        public Models.ItemSearchResponseMsgModel CreateItemSearch54(Models.ItemSearchRequestMsgModel body)
        {
            Task<Models.ItemSearchResponseMsgModel> t = CreateItemSearch54Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemSearchResponseMsgModel response from the API call</return>
        public async Task<Models.ItemSearchResponseMsgModel> CreateItemSearch54Async(Models.ItemSearchRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTIN);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/ItemSearch");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.ItemSearchResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemLookupResponseMsgModel response from the API call</return>
        public Models.ItemLookupResponseMsgModel CreateItemLookup55(Models.ItemLookupRequestMsgModel body)
        {
            Task<Models.ItemLookupResponseMsgModel> t = CreateItemLookup55Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemLookupResponseMsgModel response from the API call</return>
        public async Task<Models.ItemLookupResponseMsgModel> CreateItemLookup55Async(Models.ItemLookupRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTIN);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/ItemLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.ItemLookupResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.BrowseNodeLookupResponseMsgModel response from the API call</return>
        public Models.BrowseNodeLookupResponseMsgModel CreateBrowseNodeLookup56(Models.BrowseNodeLookupRequestMsgModel body)
        {
            Task<Models.BrowseNodeLookupResponseMsgModel> t = CreateBrowseNodeLookup56Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.BrowseNodeLookupResponseMsgModel response from the API call</return>
        public async Task<Models.BrowseNodeLookupResponseMsgModel> CreateBrowseNodeLookup56Async(Models.BrowseNodeLookupRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTIN);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/BrowseNodeLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.BrowseNodeLookupResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.SimilarityLookupResponseMsgModel response from the API call</return>
        public Models.SimilarityLookupResponseMsgModel CreateSimilarityLookup57(Models.SimilarityLookupRequestMsgModel body)
        {
            Task<Models.SimilarityLookupResponseMsgModel> t = CreateSimilarityLookup57Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.SimilarityLookupResponseMsgModel response from the API call</return>
        public async Task<Models.SimilarityLookupResponseMsgModel> CreateSimilarityLookup57Async(Models.SimilarityLookupRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTIN);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/SimilarityLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.SimilarityLookupResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartGetResponseMsgModel response from the API call</return>
        public Models.CartGetResponseMsgModel CreateCartGet58(Models.CartGetRequestMsgModel body)
        {
            Task<Models.CartGetResponseMsgModel> t = CreateCartGet58Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartGetResponseMsgModel response from the API call</return>
        public async Task<Models.CartGetResponseMsgModel> CreateCartGet58Async(Models.CartGetRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTIN);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartGet");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartGetResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartAddResponseMsgModel response from the API call</return>
        public Models.CartAddResponseMsgModel CreateCartAdd59(Models.CartAddRequestMsgModel body)
        {
            Task<Models.CartAddResponseMsgModel> t = CreateCartAdd59Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartAddResponseMsgModel response from the API call</return>
        public async Task<Models.CartAddResponseMsgModel> CreateCartAdd59Async(Models.CartAddRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTIN);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartAdd");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartAddResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartCreateResponseMsgModel response from the API call</return>
        public Models.CartCreateResponseMsgModel CreateCartCreate60(Models.CartCreateRequestMsgModel body)
        {
            Task<Models.CartCreateResponseMsgModel> t = CreateCartCreate60Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartCreateResponseMsgModel response from the API call</return>
        public async Task<Models.CartCreateResponseMsgModel> CreateCartCreate60Async(Models.CartCreateRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTIN);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartCreate");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartCreateResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartModifyResponseMsgModel response from the API call</return>
        public Models.CartModifyResponseMsgModel CreateCartModify61(Models.CartModifyRequestMsgModel body)
        {
            Task<Models.CartModifyResponseMsgModel> t = CreateCartModify61Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartModifyResponseMsgModel response from the API call</return>
        public async Task<Models.CartModifyResponseMsgModel> CreateCartModify61Async(Models.CartModifyRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTIN);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartModify");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartModifyResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartClearResponseMsgModel response from the API call</return>
        public Models.CartClearResponseMsgModel CreateCartClear62(Models.CartClearRequestMsgModel body)
        {
            Task<Models.CartClearResponseMsgModel> t = CreateCartClear62Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartClearResponseMsgModel response from the API call</return>
        public async Task<Models.CartClearResponseMsgModel> CreateCartClear62Async(Models.CartClearRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTIN);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartClear");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartClearResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemSearchResponseMsgModel response from the API call</return>
        public Models.ItemSearchResponseMsgModel CreateItemSearch63(Models.ItemSearchRequestMsgModel body)
        {
            Task<Models.ItemSearchResponseMsgModel> t = CreateItemSearch63Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemSearchResponseMsgModel response from the API call</return>
        public async Task<Models.ItemSearchResponseMsgModel> CreateItemSearch63Async(Models.ItemSearchRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTIT);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/ItemSearch");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.ItemSearchResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemLookupResponseMsgModel response from the API call</return>
        public Models.ItemLookupResponseMsgModel CreateItemLookup64(Models.ItemLookupRequestMsgModel body)
        {
            Task<Models.ItemLookupResponseMsgModel> t = CreateItemLookup64Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemLookupResponseMsgModel response from the API call</return>
        public async Task<Models.ItemLookupResponseMsgModel> CreateItemLookup64Async(Models.ItemLookupRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTIT);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/ItemLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.ItemLookupResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.BrowseNodeLookupResponseMsgModel response from the API call</return>
        public Models.BrowseNodeLookupResponseMsgModel CreateBrowseNodeLookup65(Models.BrowseNodeLookupRequestMsgModel body)
        {
            Task<Models.BrowseNodeLookupResponseMsgModel> t = CreateBrowseNodeLookup65Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.BrowseNodeLookupResponseMsgModel response from the API call</return>
        public async Task<Models.BrowseNodeLookupResponseMsgModel> CreateBrowseNodeLookup65Async(Models.BrowseNodeLookupRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTIT);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/BrowseNodeLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.BrowseNodeLookupResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.SimilarityLookupResponseMsgModel response from the API call</return>
        public Models.SimilarityLookupResponseMsgModel CreateSimilarityLookup66(Models.SimilarityLookupRequestMsgModel body)
        {
            Task<Models.SimilarityLookupResponseMsgModel> t = CreateSimilarityLookup66Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.SimilarityLookupResponseMsgModel response from the API call</return>
        public async Task<Models.SimilarityLookupResponseMsgModel> CreateSimilarityLookup66Async(Models.SimilarityLookupRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTIT);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/SimilarityLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.SimilarityLookupResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartGetResponseMsgModel response from the API call</return>
        public Models.CartGetResponseMsgModel CreateCartGet67(Models.CartGetRequestMsgModel body)
        {
            Task<Models.CartGetResponseMsgModel> t = CreateCartGet67Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartGetResponseMsgModel response from the API call</return>
        public async Task<Models.CartGetResponseMsgModel> CreateCartGet67Async(Models.CartGetRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTIT);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartGet");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartGetResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartAddResponseMsgModel response from the API call</return>
        public Models.CartAddResponseMsgModel CreateCartAdd68(Models.CartAddRequestMsgModel body)
        {
            Task<Models.CartAddResponseMsgModel> t = CreateCartAdd68Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartAddResponseMsgModel response from the API call</return>
        public async Task<Models.CartAddResponseMsgModel> CreateCartAdd68Async(Models.CartAddRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTIT);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartAdd");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartAddResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartCreateResponseMsgModel response from the API call</return>
        public Models.CartCreateResponseMsgModel CreateCartCreate69(Models.CartCreateRequestMsgModel body)
        {
            Task<Models.CartCreateResponseMsgModel> t = CreateCartCreate69Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartCreateResponseMsgModel response from the API call</return>
        public async Task<Models.CartCreateResponseMsgModel> CreateCartCreate69Async(Models.CartCreateRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTIT);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartCreate");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartCreateResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartModifyResponseMsgModel response from the API call</return>
        public Models.CartModifyResponseMsgModel CreateCartModify70(Models.CartModifyRequestMsgModel body)
        {
            Task<Models.CartModifyResponseMsgModel> t = CreateCartModify70Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartModifyResponseMsgModel response from the API call</return>
        public async Task<Models.CartModifyResponseMsgModel> CreateCartModify70Async(Models.CartModifyRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTIT);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartModify");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartModifyResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartClearResponseMsgModel response from the API call</return>
        public Models.CartClearResponseMsgModel CreateCartClear71(Models.CartClearRequestMsgModel body)
        {
            Task<Models.CartClearResponseMsgModel> t = CreateCartClear71Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartClearResponseMsgModel response from the API call</return>
        public async Task<Models.CartClearResponseMsgModel> CreateCartClear71Async(Models.CartClearRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTIT);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartClear");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartClearResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemSearchResponseMsgModel response from the API call</return>
        public Models.ItemSearchResponseMsgModel CreateItemSearch72(Models.ItemSearchRequestMsgModel body)
        {
            Task<Models.ItemSearchResponseMsgModel> t = CreateItemSearch72Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemSearchResponseMsgModel response from the API call</return>
        public async Task<Models.ItemSearchResponseMsgModel> CreateItemSearch72Async(Models.ItemSearchRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTJP);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/ItemSearch");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.ItemSearchResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemLookupResponseMsgModel response from the API call</return>
        public Models.ItemLookupResponseMsgModel CreateItemLookup73(Models.ItemLookupRequestMsgModel body)
        {
            Task<Models.ItemLookupResponseMsgModel> t = CreateItemLookup73Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemLookupResponseMsgModel response from the API call</return>
        public async Task<Models.ItemLookupResponseMsgModel> CreateItemLookup73Async(Models.ItemLookupRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTJP);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/ItemLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.ItemLookupResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.BrowseNodeLookupResponseMsgModel response from the API call</return>
        public Models.BrowseNodeLookupResponseMsgModel CreateBrowseNodeLookup74(Models.BrowseNodeLookupRequestMsgModel body)
        {
            Task<Models.BrowseNodeLookupResponseMsgModel> t = CreateBrowseNodeLookup74Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.BrowseNodeLookupResponseMsgModel response from the API call</return>
        public async Task<Models.BrowseNodeLookupResponseMsgModel> CreateBrowseNodeLookup74Async(Models.BrowseNodeLookupRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTJP);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/BrowseNodeLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.BrowseNodeLookupResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.SimilarityLookupResponseMsgModel response from the API call</return>
        public Models.SimilarityLookupResponseMsgModel CreateSimilarityLookup75(Models.SimilarityLookupRequestMsgModel body)
        {
            Task<Models.SimilarityLookupResponseMsgModel> t = CreateSimilarityLookup75Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.SimilarityLookupResponseMsgModel response from the API call</return>
        public async Task<Models.SimilarityLookupResponseMsgModel> CreateSimilarityLookup75Async(Models.SimilarityLookupRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTJP);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/SimilarityLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.SimilarityLookupResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartGetResponseMsgModel response from the API call</return>
        public Models.CartGetResponseMsgModel CreateCartGet76(Models.CartGetRequestMsgModel body)
        {
            Task<Models.CartGetResponseMsgModel> t = CreateCartGet76Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartGetResponseMsgModel response from the API call</return>
        public async Task<Models.CartGetResponseMsgModel> CreateCartGet76Async(Models.CartGetRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTJP);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartGet");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartGetResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartAddResponseMsgModel response from the API call</return>
        public Models.CartAddResponseMsgModel CreateCartAdd77(Models.CartAddRequestMsgModel body)
        {
            Task<Models.CartAddResponseMsgModel> t = CreateCartAdd77Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartAddResponseMsgModel response from the API call</return>
        public async Task<Models.CartAddResponseMsgModel> CreateCartAdd77Async(Models.CartAddRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTJP);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartAdd");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartAddResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartCreateResponseMsgModel response from the API call</return>
        public Models.CartCreateResponseMsgModel CreateCartCreate78(Models.CartCreateRequestMsgModel body)
        {
            Task<Models.CartCreateResponseMsgModel> t = CreateCartCreate78Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartCreateResponseMsgModel response from the API call</return>
        public async Task<Models.CartCreateResponseMsgModel> CreateCartCreate78Async(Models.CartCreateRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTJP);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartCreate");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartCreateResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartModifyResponseMsgModel response from the API call</return>
        public Models.CartModifyResponseMsgModel CreateCartModify79(Models.CartModifyRequestMsgModel body)
        {
            Task<Models.CartModifyResponseMsgModel> t = CreateCartModify79Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartModifyResponseMsgModel response from the API call</return>
        public async Task<Models.CartModifyResponseMsgModel> CreateCartModify79Async(Models.CartModifyRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTJP);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartModify");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartModifyResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartClearResponseMsgModel response from the API call</return>
        public Models.CartClearResponseMsgModel CreateCartClear80(Models.CartClearRequestMsgModel body)
        {
            Task<Models.CartClearResponseMsgModel> t = CreateCartClear80Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartClearResponseMsgModel response from the API call</return>
        public async Task<Models.CartClearResponseMsgModel> CreateCartClear80Async(Models.CartClearRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTJP);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartClear");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartClearResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemSearchResponseMsgModel response from the API call</return>
        public Models.ItemSearchResponseMsgModel CreateItemSearch81(Models.ItemSearchRequestMsgModel body)
        {
            Task<Models.ItemSearchResponseMsgModel> t = CreateItemSearch81Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemSearchResponseMsgModel response from the API call</return>
        public async Task<Models.ItemSearchResponseMsgModel> CreateItemSearch81Async(Models.ItemSearchRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTUK);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/ItemSearch");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.ItemSearchResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemLookupResponseMsgModel response from the API call</return>
        public Models.ItemLookupResponseMsgModel CreateItemLookup82(Models.ItemLookupRequestMsgModel body)
        {
            Task<Models.ItemLookupResponseMsgModel> t = CreateItemLookup82Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemLookupResponseMsgModel response from the API call</return>
        public async Task<Models.ItemLookupResponseMsgModel> CreateItemLookup82Async(Models.ItemLookupRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTUK);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/ItemLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.ItemLookupResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.BrowseNodeLookupResponseMsgModel response from the API call</return>
        public Models.BrowseNodeLookupResponseMsgModel CreateBrowseNodeLookup83(Models.BrowseNodeLookupRequestMsgModel body)
        {
            Task<Models.BrowseNodeLookupResponseMsgModel> t = CreateBrowseNodeLookup83Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.BrowseNodeLookupResponseMsgModel response from the API call</return>
        public async Task<Models.BrowseNodeLookupResponseMsgModel> CreateBrowseNodeLookup83Async(Models.BrowseNodeLookupRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTUK);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/BrowseNodeLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.BrowseNodeLookupResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.SimilarityLookupResponseMsgModel response from the API call</return>
        public Models.SimilarityLookupResponseMsgModel CreateSimilarityLookup84(Models.SimilarityLookupRequestMsgModel body)
        {
            Task<Models.SimilarityLookupResponseMsgModel> t = CreateSimilarityLookup84Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.SimilarityLookupResponseMsgModel response from the API call</return>
        public async Task<Models.SimilarityLookupResponseMsgModel> CreateSimilarityLookup84Async(Models.SimilarityLookupRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTUK);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/SimilarityLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.SimilarityLookupResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartGetResponseMsgModel response from the API call</return>
        public Models.CartGetResponseMsgModel CreateCartGet85(Models.CartGetRequestMsgModel body)
        {
            Task<Models.CartGetResponseMsgModel> t = CreateCartGet85Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartGetResponseMsgModel response from the API call</return>
        public async Task<Models.CartGetResponseMsgModel> CreateCartGet85Async(Models.CartGetRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTUK);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartGet");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartGetResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartAddResponseMsgModel response from the API call</return>
        public Models.CartAddResponseMsgModel CreateCartAdd86(Models.CartAddRequestMsgModel body)
        {
            Task<Models.CartAddResponseMsgModel> t = CreateCartAdd86Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartAddResponseMsgModel response from the API call</return>
        public async Task<Models.CartAddResponseMsgModel> CreateCartAdd86Async(Models.CartAddRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTUK);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartAdd");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartAddResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartCreateResponseMsgModel response from the API call</return>
        public Models.CartCreateResponseMsgModel CreateCartCreate87(Models.CartCreateRequestMsgModel body)
        {
            Task<Models.CartCreateResponseMsgModel> t = CreateCartCreate87Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartCreateResponseMsgModel response from the API call</return>
        public async Task<Models.CartCreateResponseMsgModel> CreateCartCreate87Async(Models.CartCreateRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTUK);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartCreate");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartCreateResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartModifyResponseMsgModel response from the API call</return>
        public Models.CartModifyResponseMsgModel CreateCartModify88(Models.CartModifyRequestMsgModel body)
        {
            Task<Models.CartModifyResponseMsgModel> t = CreateCartModify88Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartModifyResponseMsgModel response from the API call</return>
        public async Task<Models.CartModifyResponseMsgModel> CreateCartModify88Async(Models.CartModifyRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTUK);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartModify");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartModifyResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartClearResponseMsgModel response from the API call</return>
        public Models.CartClearResponseMsgModel CreateCartClear89(Models.CartClearRequestMsgModel body)
        {
            Task<Models.CartClearResponseMsgModel> t = CreateCartClear89Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartClearResponseMsgModel response from the API call</return>
        public async Task<Models.CartClearResponseMsgModel> CreateCartClear89Async(Models.CartClearRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTUK);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartClear");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartClearResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemSearchResponseMsgModel response from the API call</return>
        public Models.ItemSearchResponseMsgModel CreateItemSearch90(Models.ItemSearchRequestMsgModel body)
        {
            Task<Models.ItemSearchResponseMsgModel> t = CreateItemSearch90Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemSearchResponseMsgModel response from the API call</return>
        public async Task<Models.ItemSearchResponseMsgModel> CreateItemSearch90Async(Models.ItemSearchRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTUS);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/ItemSearch");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.ItemSearchResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemLookupResponseMsgModel response from the API call</return>
        public Models.ItemLookupResponseMsgModel CreateItemLookup91(Models.ItemLookupRequestMsgModel body)
        {
            Task<Models.ItemLookupResponseMsgModel> t = CreateItemLookup91Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ItemLookupResponseMsgModel response from the API call</return>
        public async Task<Models.ItemLookupResponseMsgModel> CreateItemLookup91Async(Models.ItemLookupRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTUS);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/ItemLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.ItemLookupResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.BrowseNodeLookupResponseMsgModel response from the API call</return>
        public Models.BrowseNodeLookupResponseMsgModel CreateBrowseNodeLookup92(Models.BrowseNodeLookupRequestMsgModel body)
        {
            Task<Models.BrowseNodeLookupResponseMsgModel> t = CreateBrowseNodeLookup92Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.BrowseNodeLookupResponseMsgModel response from the API call</return>
        public async Task<Models.BrowseNodeLookupResponseMsgModel> CreateBrowseNodeLookup92Async(Models.BrowseNodeLookupRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTUS);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/BrowseNodeLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.BrowseNodeLookupResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.SimilarityLookupResponseMsgModel response from the API call</return>
        public Models.SimilarityLookupResponseMsgModel CreateSimilarityLookup93(Models.SimilarityLookupRequestMsgModel body)
        {
            Task<Models.SimilarityLookupResponseMsgModel> t = CreateSimilarityLookup93Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.SimilarityLookupResponseMsgModel response from the API call</return>
        public async Task<Models.SimilarityLookupResponseMsgModel> CreateSimilarityLookup93Async(Models.SimilarityLookupRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTUS);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/SimilarityLookup");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.SimilarityLookupResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartGetResponseMsgModel response from the API call</return>
        public Models.CartGetResponseMsgModel CreateCartGet94(Models.CartGetRequestMsgModel body)
        {
            Task<Models.CartGetResponseMsgModel> t = CreateCartGet94Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartGetResponseMsgModel response from the API call</return>
        public async Task<Models.CartGetResponseMsgModel> CreateCartGet94Async(Models.CartGetRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTUS);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartGet");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartGetResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartAddResponseMsgModel response from the API call</return>
        public Models.CartAddResponseMsgModel CreateCartAdd95(Models.CartAddRequestMsgModel body)
        {
            Task<Models.CartAddResponseMsgModel> t = CreateCartAdd95Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartAddResponseMsgModel response from the API call</return>
        public async Task<Models.CartAddResponseMsgModel> CreateCartAdd95Async(Models.CartAddRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTUS);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartAdd");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartAddResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartCreateResponseMsgModel response from the API call</return>
        public Models.CartCreateResponseMsgModel CreateCartCreate96(Models.CartCreateRequestMsgModel body)
        {
            Task<Models.CartCreateResponseMsgModel> t = CreateCartCreate96Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartCreateResponseMsgModel response from the API call</return>
        public async Task<Models.CartCreateResponseMsgModel> CreateCartCreate96Async(Models.CartCreateRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTUS);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartCreate");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartCreateResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartModifyResponseMsgModel response from the API call</return>
        public Models.CartModifyResponseMsgModel CreateCartModify97(Models.CartModifyRequestMsgModel body)
        {
            Task<Models.CartModifyResponseMsgModel> t = CreateCartModify97Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartModifyResponseMsgModel response from the API call</return>
        public async Task<Models.CartModifyResponseMsgModel> CreateCartModify97Async(Models.CartModifyRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTUS);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartModify");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartModifyResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartClearResponseMsgModel response from the API call</return>
        public Models.CartClearResponseMsgModel CreateCartClear98(Models.CartClearRequestMsgModel body)
        {
            Task<Models.CartClearResponseMsgModel> t = CreateCartClear98Async(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CartClearResponseMsgModel response from the API call</return>
        public async Task<Models.CartClearResponseMsgModel> CreateCartClear98Async(Models.CartClearRequestMsgModel body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.AWSECOMMERCESERVICEPORTUS);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/CartClear");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("a&f__ieyt*", Configuration.AFIeyt);
            _headers.Add("b", Configuration.B);
            _headers.Add("c", Configuration.C);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CartClearResponseMsgModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 